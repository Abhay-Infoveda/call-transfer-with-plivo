Debugging Plivo-to-Human Agent Transfer Audio Issues
Core Issue Identification
The primary failure point occurs during call transfer between AI agent (Ultravox) and human agent due to improper audio bridging in MultiPartyCall configuration. Analysis of your implementation reveals three critical flaws:

1. MPC Role Configuration Mismatch
Your current implementation uses identical MPC names without proper role segregation:

javascript
// Initial call handling
const mpc = plivoResponse.addMultiPartyCall("UltravoxMPC", {
  role: 'Customer'
});

// Agent transfer handling
const mpcAgent = plivoResponse.addMultiPartyCall("UltravoxMPC", {
  role: "Agent"
});
Plivo's MPC requires strict role separation with dedicated initialization for each participant type. The system interprets identical MPC names with conflicting roles as invalid configurations, resulting in silent audio channels.

2. Improper Stream-MPC Interaction
The concurrent use of Stream and MPC elements creates audio pathway conflicts:

javascript
const stream = plivoResponse.addStream(response.joinUrl, {...});
const mpc = plivoResponse.addMultiPartyCall("UltravoxMPC", {...});
Plivo's architecture treats Stream (WebSocket) and MPC as mutually exclusive audio sources. This combination creates undefined audio routing behavior, particularly during transfer operations.

3. Missing MPC Participant Coordination
Your transfer logic fails to establish proper MPC relationships between original caller and transferred agent:

javascript
// Original call MPC setup (customer role)
// ...
// Agent transfer MPC setup (separate instance)
const outboundCall = await plivoClient.calls.create(...);
This creates two isolated MPC instances rather than bridging participants in a single call context.

Revised Implementation Strategy
1. Unified MPC Architecture
Initial Call Setup
javascript
router.post('/incoming', async (req, res) => {
  const mpcName = `mpc_${Date.now()}`; // Unique MPC identifier
  
  const plivoResponse = new plivo.Response();
  
  // Initialize MPC with customer role
  plivoResponse.addMultiPartyCall(mpcName, {
    role: 'Customer',
    startMpcOnEnter: true,
    statusCallbackUrl: `${process.env.BASE_URL}/plivo/mpc-events`
  }).addText(mpcName);

  res.set('Content-Type', 'text/xml');
  res.send(plivoResponse.toXML());
});
Agent Transfer Sequence
javascript
async function transferActiveCall(ultravoxCallId) {
  const mpcName = activeCalls.get(ultravoxCallId).mpcName;
  
  // Add agent to existing MPC
  const transferXML = `
    <Response>
      <MultiPartyCall role="Agent">${mpcName}</MultiPartyCall>
    </Response>
  `;

  await plivoClient.calls.update(
    originalCallUUID,
    { legs: 'aleg', alegUrl: `${process.env.BASE_URL}/plivo/transfer-xml/${mpcName}` }
  );
}
2. Role-Specific Audio Configuration
Implement discrete audio handling for each participant role:

javascript
// Customer MPC params
{
  role: 'Customer',
  waitMusicUrl: 'https://wait-music.com/customer_hold.mp3',
  coachMode: true
}

// Agent MPC params
{
  role: 'Agent', 
  waitMusicUrl: 'https://wait-music.com/agent_hold.mp3',
  coachMode: false
}
Role-specific configurations ensure proper audio mixing and feature enablement.

Critical Debugging Steps
1. MPC State Validation
Add detailed MPC monitoring:

javascript
router.post('/mpc-events', (req, res) => {
  console.log('MPC State Change:', {
    name: req.body.MpcName,
    state: req.body.MpcState,
    participants: req.body.Participants
  });
  res.status(200).end();
});
2. Audio Format Verification
Ensure codec consistency across all components:

javascript
// Validate Ultravox audio configuration
ULTRAVOX_CALL_CONFIG.medium.plivo = {
  audioFormat: 'mulaw',
  sampleRate: 8000
};

// MPC audio enforcement
plivoResponse.addMultiPartyCall(mpcName, {
  audioTrack: 'both',
  contentType: 'audio/x-mulaw;rate=8000'
});
3. Transfer Sequence Optimization
Implement phased transfer workflow:

Pre-Transfer Preparation

javascript
await plivoClient.calls.update(
  originalCallUUID, 
  { legs: 'aleg', alegUrl: 'hold_music.xml' }
);
Agent Connection

javascript
const agentCall = await plivoClient.calls.create(
  fromNumber,
  agentNumber,
  `${process.env.BASE_URL}/mpc-join/${mpcName}/agent`
);
MPC Bridging

javascript
// Original caller MPC update
await plivoClient.multiPartyCalls.addParticipant(
  mpcName,
  { role: 'Customer', callUuid: originalCallUUID }
);

// Agent MPC join
await plivoClient.multiPartyCalls.addParticipant(
  mpcName,
  { role: 'Agent', callUuid: agentCall.uuid }
);
Key Configuration Requirements
1. MPC Timeout Synchronization
javascript
// Server-side timeout control
const MPC_TIMEOUT = 3600; // 1 hour

// MPC initialization
plivoResponse.addMultiPartyCall(mpcName, {
  maxDuration: MPC_TIMEOUT,
  maxParticipants: 3
});
2. Network QoS Enforcement
javascript
// WebSocket configuration
plivoResponse.addStream(wsUrl, {
  bidirectional: true,
  audioTrack: 'both',
  networkQuality: 'high'
});
3. Failover Handling
Implement automatic transfer retries:

javascript
async function safeTransfer(callUUID, attempts = 3) {
  try {
    return await plivoClient.calls.update(callUUID, ...);
  } catch (error) {
    if(attempts > 0) {
      await new Promise(resolve => setTimeout(resolve, 2000));
      return safeTransfer(callUUID, attempts - 1);
    }
    throw error;
  }
}
Verification Checklist
MPC Role Validation

Confirm Customer and Agent roles appear in MPC state events

Verify participant count reaches 2 during transfers

Audio Format Consistency

Validate Âµ-law 8000Hz usage in all components

Check Ultravox WebSocket audio encoding

Network Performance

Ensure <500ms latency between all services

Confirm WebSocket ping/pong <100ms

Error Handling

Test failed transfer recovery

Verify hold music fallback activation

Conclusion
The root cause lies in improper MPC role management and Stream/MPC interaction conflicts. By implementing role-specific MPC instances with strict audio configuration controls and adding comprehensive state monitoring, you can resolve the bidirectional audio issues during call transfers. The provided code enhancements address the critical gaps in participant coordination and audio pathway management required for successful Plivo-based call center operations.